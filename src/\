doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Distributed Systems and You

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    link(rel='stylesheet', type='text/css', href='styles/theme.css')
    // endbuild

  body.classic

    article

      section
        h1 Distributed Systems and You

      section
        ul
          h2 What is a distributed system?

      section
        h1 "distributed"?

      section
        ul
          li
            h2 Telecommunication
          li Telephone and cellular networks
          li Computer network (the Internet!)

        ul
          li
            h2 Network applications
          li www and p2p
          li MMORPGs
          li Distributed DBs

        ul
          li
            h2 Real-time process control
          li Aircraft control systems

      section
        h2 Properties
        ul
          li Concurrency of components
          li Lack of a global clock
          li Independent failure

      section
        h2 Concurrency of components
        br
        img(src="img/concurrency.png")

      section
        h2 Lack of global clock
        br
        img(src="img/clock.gif")

      section
        h2 Independent failure
        br
        img(src="img/failure.png", style="width: 60%;")

      section
        h2 Service-Oriented Architecture (SOA)

      section
        ul.bullet
          li
            h3 Dozens of small services &gt; one monolithic application
          li
            h3 Abstraction like functions are for code, but system level
          li
            h3 Easy to diagnose which system is having problems
          li
            h3 Failure == reduced functionality, not going down

      section
        h2 Message passing
        br
        ul.bullet
          li Invoking behaviour through some intermediary service
          li Send a message to a process which selects and invoke actual code, rather than invoking processes or functions by name
          li OOP

      section
        h1 ...

      section
        h1 CAP theorem

      section
        h2 Consistency
        h2 Availability
        h2 Partition tolerance
        br
        ul
          li
            br
          li
            h2 Pick two

      section
        h2 C(onsistency)
        ul
          li All operations look as though they completed in a single instant / applied to all systems at the same logical time

      //-section
        //-h2 Advantages

      //-section
        //-ul
          //-li Cost: 4 boxes with 1GB RAM &gt; 1 box with 4GB RAM
          //-li Higher availability and reliability
          //-li Speed and distributed load
          //-li Incremental growth (modularity)

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild
